\documentclass{article}

\usepackage{noweb}
\usepackage[utf8]{inputenc}
\usepackage{geometry}
\usepackage{parskip}
\usepackage{amsmath}
\usepackage{mathtools}
\usepackage[title]{appendix}
\usepackage[colorlinks,linkcolor=blue]{hyperref}

\title{Day 20: Firewall Rules}

\begin{document}

\maketitle{}

\section{Problem A}

Today's problem is about intervals;
we are given a list of integer intervals
(representing IP address ranges, so between
0 and $2^{32}-1$) and we must figure
out the smallest integer not covered by
any interval.

\section{Solution A}

I tried to think of a clever way to do
this problem in the metro, but let me do
something different today: I'll code the
na√Øve way first (keep a vector of 4 billion
elements) that is obviously correct and
I'll use it to test alternative approaches.

\section{Parsing}

Before we get to implementing the solution(s),
let's parse the intervals into a vector.
We shall represent intervals with a tuple.

IP addresses fit in a [[u32]], however for
convenience we'll use [[usize]] to allow us
to index in a vector without having to cast.

<<functions>>=
fn parse_range(s: &str) -> (usize, usize) {
    let ends: Vec<&str> = s.split('-').collect();
    (ends[0].parse::<usize>().unwrap(),
     ends[1].parse::<usize>().unwrap())
}
@

<<unit tests>>=
#[test]
fn test_parse_range() {
    use super::parse_range;
    assert_eq!((3, 12), parse_range("3-12"));
    assert_eq!((20, 200), parse_range("20-200"));
}
@

\section{Dumb approach}

Our dumb solution is quite straight-forward:
create an array of 4 billion elements initialized
to [[false]] (for not black listed);
for each number in an interval, set the corresponding
array element to [[true]].  Once that phase is done,
find the first index that is still [[false]],
i.e., not black listed. Easy.

<<functions>>=
fn solve_a_dumb(intervals: &[(usize, usize)]) -> usize {
    let mut black_listed: Vec<bool> = iter::repeat(false)
        .take(u32::max_value() as usize + 1)
        .collect();
    for interval in intervals {
        for i in interval.0 .. interval.1 + 1 {
            black_listed[i] = true;
        }
    }

    for i in 0 .. black_listed.len() {
        if !black_listed[i] {
            return i;
        }
    }
    return 0;
}
@

\section{Solution B}

Part B asks us to count how many IPs are allowed,
i.e., not black listed.  Let's use the same dumb approach.


<<functions>>=
fn solve_b_dumb(intervals: &[(usize, usize)]) -> usize {
    let mut black_listed: Vec<bool> = iter::repeat(false)
        .take(u32::max_value() as usize + 1)
        .collect();
    for interval in intervals {
        for i in interval.0 .. interval.1 + 1 {
            black_listed[i] = true;
        }
    }

    let mut not_black_listed = 0;
    for i in 0 .. black_listed.len() {
        if !black_listed[i] {
            not_black_listed += 1;
        }
    }
    return not_black_listed;
}
@

\section{Being smarter about intervals}

The two solutions above worked, and gave
an answer in about 6 seconds for A and 10
seconds for B.  Not great, but certainly
a nice demonstration that an unsophisticated
approach can be coded quickly and easily
and yield a correct response.  Still, let's
spend some time figuring out a better solution,
i.e., something that doesn't require gigabytes
of memory.

First, let's learn a little something about
our input data.  There are two things we should
know:
the intervals in the input can overlap
(i.e., the same IP can be contained in multiple intervals),
and the intervals are not sorted.

If the intervals didn't overlap and were ordered,
we could find our answers more eansily.
For instance, in part A, the first IP that
is not black listed would be the one more
than the end point of the first interval.

\paragraph{Mergeability}
Suppose that we have two intervals, $(a,b)$ and $(c,d)$.
Further suppose that $a \le b$, $c \le d$, and $a \le c$.
We can merge these intervals in two cases:
\begin{enumerate}
\item if $b \ge c$, i.e., the first interval
  overlaps with the second;
\item if $b+1 = c$, i.e., the second interval
  begins exactly where the first one ends.
\end{enumerate}

We check both cases (using only one condition) in the [[mergeable]] function.

<<functions>>=
fn mergeable(x: (usize, usize), y: (usize, usize)) -> bool {
    x.1 + 1 >= y.0
}
@

<<unit tests>>=
#[test]
fn test_mergeable() {
    use super::mergeable;
    assert_eq!(true, mergeable((1, 6), (5, 10)));
    assert_eq!(true, mergeable((1, 5), (5, 10)));
    assert_eq!(true, mergeable((1, 4), (5, 10)));
    assert_eq!(false, mergeable((1, 3), (5, 10)));
}
@

\paragraph{Merging two intervals}
We can merge two intervals by creating a new
one which begins at $a$ (remember our invariant,
$a$ is always lesser than or equal to $c$)
and which ends at $max(b,d)$.

<<functions>>=
fn merge(x: (usize, usize), y: (usize, usize)) -> (usize, usize) {
    (x.0, cmp::max(x.1, y.1))
}
@

<<unit tests>>=
#[test]
fn test_merge() {
    use super::merge;
    assert_eq!((1, 10), merge((1, 5), (6, 10)));
    assert_eq!((1, 10), merge((1, 5), (5, 10)));
    assert_eq!((1, 10), merge((1, 5), (3, 10)));
}
@

\paragraph{Merging multiple intervals}
To merge a vector of intervals, we
repeatedly merge intervals until
two intervals are not mergeable.

For example, if the first and second
intervals are mergeable, we combine them
and then verify if this new interval
can be merged with the third input interval
and so on.

We assume that the input vector is sorted.

<<functions>>=
fn merge_all(intervals: &[(usize, usize)]) -> Vec<(usize, usize)> {
    let mut merged = Vec::new();
    merged.push(intervals[0]);

    for interval in intervals[1..].iter() {
        let n = merged.len();
        if mergeable(merged[n-1], *interval) {
            merged[n-1] = merge(merged[n-1], *interval);
        } else {
            merged.push(*interval);
        }
    }

    return merged;
}
@

<<unit tests>>=
#[test]
fn test_merge_all() {
    use super::merge_all;
    let mut v = vec![(1, 3), (3, 5), (7, 8)];
    assert_eq!(vec![(1,5), (7,8)], merge_all(&mut v));
}
@

\paragraph{Solving A intelligently}
Solving Part A is quite straight-forward now:
given a list of sorted intervals, we merge them
together, and return the first interval's end point
plus one.

<<functions>>=
fn solve_a_intelligently(intervals: &[(usize, usize)]) -> usize {
    let merged = merge_all(intervals);
    return merged[0].1 + 1;
}
@

\paragraph{Solving B intelligently}
Solving Part B is similarly straight-forward:
once we have the list of intervals, we add
the number of IPs in the gaps between them.

<<functions>>=
fn solve_b_intelligently(intervals: &[(usize, usize)]) -> usize {
    let merged = merge_all(intervals);
    let mut not_black_listed = 0;
    for i in 1 .. merged.len() {
        not_black_listed += merged[i].0 - merged[i-1].1 - 1;
    }
    return not_black_listed;
}
@

\section{Putting it all together}

Using the newer, smarter approach takes
about 2ms, a very nice improvement both
in time and in memory over the previous
solutions (a speed-up of around 8000x).

<<*>>=
use std::cmp;
use std::io;
use std::iter;

<<functions>>

#[cfg(not(test))]
fn main() {
    let stdin = io::stdin();
    let mut buf = String::new();
    let mut intervals = Vec::new();
    while stdin.read_line(&mut buf).unwrap() > 0 {
        intervals.push(parse_range(&buf.trim()));
        buf.clear();
    }
    intervals.sort();
    println!("A: {}", solve_a_intelligently(&intervals));
    println!("B: {}", solve_b_intelligently(&intervals));
}
@

\begin{appendices}

\section{}

<<*>>=
#[cfg(test)]
mod test {
    <<unit tests>>
}
@

\end{appendices}

\end{document}
