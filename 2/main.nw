\documentclass{article}

\usepackage{noweb}
\usepackage{geometry}
\usepackage{parskip}
\usepackage{amsmath}
\usepackage{mathtools}
\usepackage[title]{appendix}
\usepackage[colorlinks,linkcolor=blue]{hyperref}

\begin{document}

\section{Displacements}

\begin{align*}
&\begin{pmatrix}
0 & 1 & 2 \\ 0 & 1 & 2 \\ 3 & 4 & 5
\end{pmatrix} \\
&\qquad\,\Uparrow \\
\begin{pmatrix}
0 & 0 & 1 \\ 3 & 3 & 4 \\ 6 & 6 & 7
\end{pmatrix}
\Leftarrow
&\begin{pmatrix}
0 & 1 & 2 \\ 3 & 4 & 5 \\ 6 & 7 & 8
\end{pmatrix}
\Rightarrow
\begin{pmatrix}
1 & 2 & 2 \\ 4 & 5 & 5 \\ 7 & 7 & 8
\end{pmatrix}
\\
&\qquad\,\Downarrow \\
&\begin{pmatrix}
3 & 4 & 5 \\ 6 & 7 & 8 \\ 6 & 7 & 8
\end{pmatrix} \\
\end{align*}

The main operation in the problem is to move up/down and
left/right by one row or column if possible, and otherwise
to stay put.

It is not a very difficult problem, and a programmer could
easily come up with 3--4 ways to perform write this
transformation.  The simplest way would be to write out all
the cases by hand; another approach would be to check the
current position and decide whether to add/subtract 1
(moving right/left) or 3 (moving up/down).

I initially thought I'd be fancy and use modulos and
min/max; after I failed to come up with a formula for the
left and right movements, I realized that the approach was
too clever for my own good, and so I've decided to go with
listing all the cases in a lookup table.

Since there are only 9 possible inputs of interest for each
function, we have unit tests to make sure that the
implementation works as expected in Appendix \ref{app:tests}.



<<displacement functions>>=
fn down(pos: usize) -> usize {
    [3, 4, 5, 6, 7, 8, 6, 7, 8][pos]
}

fn up(pos: usize) -> usize {
    [0, 1, 2, 0, 1, 2, 3, 4, 5][pos]
}

fn left(pos: usize) -> usize {
    [0, 0, 1, 3, 3, 4, 6, 6, 7][pos]
}

fn right(pos: usize) -> usize {
    [1, 2, 2, 4, 5, 5, 7, 8, 8][pos]
}
@


The function below converts a keypad position
into the proper digit as a char; this is not
strictly necessary for problem A, but I've added
it after solving problem B to have more symmetry
between the two solutions.

<<display functions>>=
fn keypad_a(pos: usize) -> char {
    ['1', '2', '3', '4', '5', '6', '7', '8', '9'][pos]
}
@


\section{Problem B}

The new keypad is fancier, but we can apply
the same technique as before; our lookup tables
are simply going to be larger.  We'll also create
a function to return the proper digit; we'll use a
lookup table for that too.

<<displacement functions>>=
fn down_b(pos: usize) -> usize {
    [ 0,  0,  7,  0,  0,
      0, 11, 12, 13,  0,
     10, 16, 17, 18, 14,
      0, 16, 22, 18,  0,
      0,  0, 22,  0,  0][pos]
}

fn up_b(pos: usize) -> usize {
    [ 0,  0,  2,  0,  0,
      0,  6,  2,  8,  0,
     10,  6,  7,  8, 14,
      0, 11, 12, 13,  0,
      0,  0, 17,  0,  0][pos]
}

fn left_b(pos: usize) -> usize {
    [ 0,  0,  2,  0,  0,
      0,  6,  6,  7,  0,
     10, 10, 11, 12, 13,
      0, 16, 16, 17,  0,
      0,  0, 22,  0,  0][pos]
}

fn right_b(pos: usize) -> usize {
    [ 0,  0,  2,  0,  0,
      0,  7,  8,  8,  0,
     11, 12, 13, 14, 14,
      0, 17, 18, 18,  0,
      0,  0, 22,  0,  0][pos]
}
@

<<display functions>>=
fn keypad_b(pos: usize) -> char {
    ['.', '.', '1', '.', '.',
     '.', '2', '3', '4', '.',
     '5', '6', '7', '8', '9',
     '.', 'A', 'B', 'C', '.',
     '.', '.', 'D', '.', '.'][pos]
}
@

\section{Putting it all together}

<<*>>=
<<displacement functions>>
<<display functions>>

#[cfg(not(test))]
fn main() {
    let mut posa = 4;
    let mut posb = 11;
    let lines = <<input lines>>;
    let mut sola = String::new();
    let mut solb = String::new();
    for line in lines {
        for c in line.chars() {
            match c {
                'D' => { posa = down(posa); posb = down_b(posb); }
                'U' => { posa = up(posa); posb = up_b(posb); }
                'L' => { posa = left(posa); posb = left_b(posb); }
                'R' => { posa = right(posa); posb = right_b(posb); }
                _ => { }
            }
        }
        sola.push(keypad_a(posa));
        solb.push(keypad_b(posb));
    }
    println!("A: {}", sola);
    println!("B: {}", solb);
}

#[cfg(test)]
mod test {
    use super::{up, down, left, right, keypad_a};
    use super::{up_b, down_b, left_b, right_b, keypad_b};
    <<unit tests>>
}
@

<<input lines>>=
vec![
"DDDURLURURUDLDURRURULLRRDULRRLRLRURDLRRDUDRUDLRDUUDRRUDLLLURLUURLRURURLRLUDDURUULDURDRUUDLLDDDRLDUULLUDURRLUULUULDLDDULRLDLURURUULRURDULLLURLDRDULLULRRRLRLRULLULRULUUULRLLURURDLLRURRUUUDURRDLURUURDDLRRLUURLRRULURRDDRDULLLDRDDDDURURLLULDDULLRLDRLRRDLLURLRRUDDDRDLLRUDLLLLRLLRUDDLUUDRLRRRDRLRDLRRULRUUDUUDULLRLUDLLDDLLDLUDRURLULDLRDDLDRUDLDDLDDDRLLDUURRUUDLLULLRLDLUURRLLDRDLRRRRUUUURLUUUULRRUDDUDDRLDDURLRLRLLRRUDRDLRLDRRRRRRUDDURUUUUDDUDUDU",
"RLULUULRDDRLULRDDLRDUURLRUDDDUULUUUDDRDRRRLDUURDURDRLLLRDDRLURLDRRDLRLUURULUURDRRULRULDULDLRRDDRLDRUDUDDUDDRULURLULUDRDUDDDULRRRURLRRDLRDLDLLRLUULURLDRURRRLLURRRRRLLULRRRDDLRLDDUULDLLRDDRLLUUDRURLRULULRLRUULUUUUUDRURLURLDDUDDLRDDLDRRLDLURULUUDRDLULLURDLLLRRDRURUDDURRLURRDURURDLRUDRULUULLDRLRRDRLDDUDRDLLRURURLUDUURUULDURUDULRLRDLDURRLLDRDUDRUDDRLRURUDDLRRDLLLDULRRDRDRRRLURLDLURRDULDURUUUDURLDLRURRDRULLDDLLLRUULLLLURRRLLLDRRUDDDLURLRRRDRLRDLUUUDDRULLUULDURLDUUURUDRURUDRDLRRLDRURRLRDDLLLULUDDUULDURLRUDRDDD",
"RDDRUDLRLDDDRLRRLRRLUULDRLRUUURULRRLUURLLLRLULDDLDLRLULULUUDDDRLLLUDLLRUDURUDDLLDUDLURRULLRDLDURULRLDRLDLDRDDRUDRUULLLLRULULLLDDDULUUDUUDDLDRLRRDLRLURRLLDRLDLDLULRLRDLDLRLUULLDLULRRRDDRUULDUDLUUUUDUDRLUURDURRULLDRURUDURDUULRRULUULULRLDRLRLLRRRLULURLUDULLDRLDRDRULLUUUDLDUUUDLRDULRDDDDDDDDLLRDULLUDRDDRURUDDLURRUULUURURDUDLLRRRRDUDLURLLURURLRDLDUUDRURULRDURDLDRUDLRRLDLDULRRUDRDUUDRLURUURLDLUDLLRDDRDU",
"LLDDDDLUDLLDUDURRURLLLLRLRRLDULLURULDULDLDLLDRRDLUDRULLRUUURDRLLURDDLLUDDLRLLRDDLULRLDDRURLUDRDULLRUDDLUURULUUURURLRULRLDLDDLRDLDLLRUURDLUDRRRDDRDRLLUDDRLDRLLLRULRDLLRLRRDDLDRDDDUDUDLUULDLDUDDLRLDUULRULDLDULDDRRLUUURUUUDLRDRULDRRLLURRRDUDULDUDUDULLULLULULURLLRRLDULDULDLRDDRRLRDRLDRLUDLLLUULLRLLRLDRDDRUDDRLLDDLRULLLULRDDDLLLDRDLRULDDDLULURDULRLDRLULDDLRUDDUDLDDDUDRDRULULDDLDLRRDURLLRLLDDURRLRRULLURLRUDDLUURULULURLRUDLLLUDDURRLURLLRLLRRLDULRRUDURLLDDRLDLRRLULUULRRUURRRDULRLRLRDDRDULULUUDULLLLURULURRUDRLL",
"UULLULRUULUUUUDDRULLRLDDLRLDDLULURDDLULURDRULUURDLLUDDLDRLUDLLRUURRUDRLDRDDRRLLRULDLLRUUULLLDLDDULDRLRURLDRDUURLURDRUURUULURLRLRRURLDDDLLDDLDDDULRUDLURULLDDRLDLUDURLLLLLRULRRLLUDRUURLLURRLLRDRLLLRRDDDRRRDLRDRDUDDRLLRRDRLRLDDDLURUUUUULDULDRRRRLUDRLRDRUDUDDRULDULULDRUUDUULLUDULRLRRURDLDDUDDRDULLUURLDRDLDDUURULRDLUDDLDURUDRRRDUDRRDRLRLULDRDRLRLRRUDLLLDDDRURDRLRUDRRDDLDRRLRRDLUURLRDRRUDRRDLDDDLRDDLRDUUURRRUULLDDDLLRLDRRLLDDRLRRRLUDLRURULLDULLLUDLDLRLLDDRDRUDLRRDDLUU"
]
@

\begin{appendices}
\section{}
\label{app:tests}

<<unit tests>>=
#[test]
fn test_down() {
    assert_eq!(3, down(0));
    assert_eq!(4, down(1));
    assert_eq!(5, down(2));
    assert_eq!(6, down(3));
    assert_eq!(7, down(4));
    assert_eq!(8, down(5));
    assert_eq!(6, down(6));
    assert_eq!(7, down(7));
    assert_eq!(8, down(8));
}

#[test]
fn test_up() {
    assert_eq!(0, up(0));
    assert_eq!(1, up(1));
    assert_eq!(2, up(2));
    assert_eq!(0, up(3));
    assert_eq!(1, up(4));
    assert_eq!(2, up(5));
    assert_eq!(3, up(6));
    assert_eq!(4, up(7));
    assert_eq!(5, up(8));
}

#[test]
fn test_left() {
    assert_eq!(0, left(0));
    assert_eq!(0, left(1));
    assert_eq!(1, left(2));
    assert_eq!(3, left(3));
    assert_eq!(3, left(4));
    assert_eq!(4, left(5));
    assert_eq!(6, left(6));
    assert_eq!(6, left(7));
    assert_eq!(7, left(8));
}

#[test]
fn test_right() {
    assert_eq!(1, right(0));
    assert_eq!(2, right(1));
    assert_eq!(2, right(2));
    assert_eq!(4, right(3));
    assert_eq!(5, right(4));
    assert_eq!(5, right(5));
    assert_eq!(7, right(6));
    assert_eq!(8, right(7));
    assert_eq!(8, right(8));
}

#[test]
fn test_keypad_a() {
    assert_eq!('1', keypad_a(0));
    assert_eq!('2', keypad_a(1));
    assert_eq!('3', keypad_a(2));
    assert_eq!('4', keypad_a(3));
    assert_eq!('5', keypad_a(4));
    assert_eq!('6', keypad_a(5));
    assert_eq!('7', keypad_a(6));
    assert_eq!('8', keypad_a(7));
    assert_eq!('9', keypad_a(8));
}
@

\section{}
<<unit tests>>=
#[test]
fn test_keypad_b() {
    assert_eq!('1', keypad_b(2));
    assert_eq!('2', keypad_b(6));
    assert_eq!('3', keypad_b(7));
    assert_eq!('4', keypad_b(8));
    assert_eq!('5', keypad_b(10));
    assert_eq!('6', keypad_b(11));
    assert_eq!('7', keypad_b(12));
    assert_eq!('8', keypad_b(13));
    assert_eq!('9', keypad_b(14));
    assert_eq!('A', keypad_b(16));
    assert_eq!('B', keypad_b(17));
    assert_eq!('C', keypad_b(18));
    assert_eq!('D', keypad_b(22));
}
@

\end{appendices}

\end{document}
