\documentclass{article}

\usepackage{noweb}
\usepackage{geometry}
\usepackage{parskip}
\usepackage{amsmath}
\usepackage{mathtools}
\usepackage[title]{appendix}
\usepackage[colorlinks,linkcolor=blue]{hyperref}

\begin{document}

\section{Problem A}

In today's problem, we need to determine
if an encrypted room name refers to a real
room or to a decoy.
The string below is an example of a string
that we must process.

\begin{verbatim}
aaaaa-bbb-z-y-x-123[abxyz]
\end{verbatim}

A string consists of three distinct components:

\begin{itemize}
\item an encrypted name (in the example above, ``aaaaa-bbb-z-y-x'');
\item a room number (``123'');
\item a checksum (``abxyz'').
\end{itemize}

Though the string contains punctuation (dashes and brackets),
they are entirely ignored: the dashes are not considered part
of the room name, and the brackets just help to visually
identify the checksum.

We check that a room name is real if the letters in the
checksum are ordered from most common to least common.
Ties are broken by alphabetical order.

\section{Solution A outline}

\begin{description}
\item[Parsing strings]
Extracting the three components of the string sure sounds like a
scanning problem to me.  I'll scan a string and return a triple
containing the three components.  I could use regular expressions for
that purpose, but I'm not using Cargo, and I don't mind doing it by
hand.

\item[Checksum verification]
To verify the checksum, I'll convert the room name into a vector of
pairs.  The first component of the pair is a count, the second
component is the character.  We can then sort the vector and
do a character-by-character comparison.
\end{description}

\section{Parsing a string (A)}

Since we're foregoing using the very cool [[regex]] crate,
the job of scanning is going to be a bit longer.
Rather than being annoyed with this fact,
I'll choose to be happy at the occasion of exercising
some programming muscles, lest they begin to atrophy.

The problem makes it very clear that there are three
components in a string, and so it makes sense to have
a structure that can tell us the \emph{state} we are
in, i.e., what is the component that we are parsing
at the moment?

<<declare parsing states>>=
enum State {
    RoomName,
    RoomId,
    Checksum
}
@

Since a room description string contains
3 informations, it makes sense to store
them in a structure.  Our type, [[RoomInfo]],
has 4 fields because I saw the Problem B
statement, and I know I will need to keep
the raw encrypted room name.

<<declare room info structure>>=
#[derive(Debug)]
struct RoomInfo {
    encrypted_name: String,
    char_tallies: Vec<(u32, char)>,
    id: u32,
    checksum: String
}
@


To parse a room name, we inspect the class of
the current character, \emph{c}.
If \emph{c} is alphabetic, we add one to its
count in the tally array.
If \emph{c} is a dash (`-'), we simply move
on to the next character.
If \emph{c} is numeric, it means that we're
now in the section of the string that contains
the room id.  We change the current state of
the parsing process, and we record this first
digit in [[room_id]]. (If we don't save
the first digit here, we ``lose'' it, because
the next iteration will set \emph{c} to the
second digit of the room id.)

<<parse room name>>=
if c.is_alphabetic() {
    encrypted_name.push(c);
    char_tally[c as usize - 97] += 1;
} else if c == '-' {
    encrypted_name.push(c);
} else if c.is_numeric() {
    curr_state = RoomId;
    room_id = 10*room_id + c.to_digit(10).expect("non digit");
}
@

To make the checksum verification process easier, we
convert the tally array to a [[Vec<(usize, char)>]].
Only the characters that have a positive tally are
included.

<<convert tally array to vector>>=
let mut v = Vec::new();
for (idx, &count) in char_tally.iter().enumerate() {
    if count > 0 {
        let c = ((idx + 97) as u8) as char;
        v.push((count, c));
    }
}
@

Parsing the (rest of the) room id is simpler: we read
digits and add them to [[room_id]] until we see an
opening bracket.
A small note: Rust's [[is_digit]] method requires a
radix argument.

<<parse room id>>=
if c.is_digit(10) {
    room_id = 10*room_id + c.to_digit(10).expect("non digit");
} else if c == '[' {
    curr_state = Checksum;
}
@

Finally, we can read the checksum.  We're already past the
opening bracket, so we read letters into [[checksum]].
When we see the closing bracket, we can break out of the loop.

<<parse checksum>>=
if c.is_alphabetic() {
    checksum.push(c);
} else if c == ']' {
    break;
}
@

We can now put these chunks together into a parse routine.

<<functions>>=
fn parse(s: &str) -> RoomInfo {
    use State::*;
    let mut char_tally = [0; 26];
    let mut encrypted_name = String::new();
    let mut room_id = 0;
    let mut checksum = String::new();
    let mut curr_state = RoomName;

    for c in s.chars() {
        match curr_state {
            RoomName => { <<parse room name>> }
            RoomId => { <<parse room id>> }
            Checksum => { <<parse checksum>> }
        }
    }
    <<convert tally array to vector>>
    return RoomInfo {
        encrypted_name: encrypted_name,
        char_tallies: v,
        id: room_id,
        checksum: checksum
    };
}
@

<<unit tests>>=
#[test]
fn test_parse() {
    use super::parse;
    assert!({
        let r = parse("aaaaa-bbb-z-y-x-123[abxyz]");
        r.encrypted_name == "aaaaa-bbb-z-y-x-"
        && r.char_tallies == vec![(5, 'a'), (3, 'b'), (1, 'x'), (1, 'y'), (1, 'z')]
        && r.id == 123
        && r.checksum == "abxyz"
    });
    assert!({
        let r = parse("not-a-real-room-404[oarel]");
        r.encrypted_name == "not-a-real-room-"
        && r.char_tallies == vec![
            (2, 'a'), (1, 'e'), (1, 'l'), (1, 'm'),
            (1, 'n'), (3, 'o'), (2, 'r'), (1, 't')]
        && r.id == 404
        && r.checksum == "oarel"
    });

}
@

\section{Checksum verification (A)}

Verifying a room's checksum is done in two
steps: (1) sort the count-char vector in
non-increasing order of count and non-decreasing
order of char, (2) make sure the
characters in the checksum appear in order
in the sorted vector.

To make the main program a little easier and shorter,
the verification function returns 0 on failure, and the
room id on success.  Since the room ids are simply added
together, a successful check of a room with an id of 0
still does the right thing in the caller code.

<<functions>>=
fn verify_checksum(r: &mut RoomInfo) -> u32 {
    r.char_tallies.sort_by(|&(count1, char1), &(count2, char2)| {
        if count1 > count2 { return Ordering::Less; }
        if char1 < char2 { return Ordering::Less; }
        return Ordering::Equal;
    });
    for (i, c) in r.checksum.chars().enumerate() {
        if c != r.char_tallies[i].1 {
            return 0;
        }
    }
    return r.id;
}
@


<<unit tests>>=
#[test]
fn test_verify_checksum() {
    use super::{parse, verify_checksum};
    assert_eq!(123, {
        let mut r = parse("aaaaa-bbb-z-y-x-123[abxyz]");
        verify_checksum(&mut r)
    });

    assert_eq!(404, {
        let mut r = parse("not-a-real-room-404[oarel]");
        verify_checksum(&mut r)
    });
}
@

\section{Decrypting room names (B)}

<<functions>>=
fn decrypt_room(s: &str, shift: u32) -> String {
    let mut out = String::new();
    for c in s.chars() {
        if c == '-' {
            out.push(' ');
        } else if c.is_alphabetic() {
            let b = c as u8;
            let off = (shift % 26) as u8;
            let c2 = (((b - 97 + off) % 26) + 97) as char;
            out.push(c2);
        }
    }
    return out;
}
@

<<unit tests>>=
#[test]
fn test_decrypt_room() {
    use super::decrypt_room;
    assert_eq!("bcd yza", decrypt_room("abc-xyz", 1));
    assert_eq!("very encrypted name ", decrypt_room("qzmt-zixmtkozy-ivhz-", 343));
}
@

\section{Putting it all together}

Like yesterday, the input is too large to
fit in the program, so we read it from stdin.

<<*>>=
use std::cmp::Ordering;
use std::io;
<<declare parsing states>>
<<declare room info structure>>
<<functions>>
fn main() {
    let stdin = io::stdin();
    let mut line = String::new();
    let mut sum = 0;

    while stdin.read_line(&mut line).unwrap() > 0 {
        let mut r = parse(&line);
        let ok = verify_checksum(&mut r);
        sum += ok;

        if ok != 0 {
            let decrypted_name = decrypt_room(&r.encrypted_name, r.id);
            if decrypted_name.contains("northpole") {
                println!("B: {} ({})", decrypted_name, r.id);
            }
        }

        line.clear();
    }
    println!("A: {}", sum);
}
@


\begin{appendices}

\section{}

<<*>>=
#[cfg(test)]
mod test {
    <<unit tests>>
}
@

\end{appendices}

\end{document}
