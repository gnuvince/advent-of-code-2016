\documentclass{article}

\usepackage{noweb}
\usepackage{geometry}
\usepackage{parskip}
\usepackage{amsmath}
\usepackage{mathtools}
\usepackage[title]{appendix}
\usepackage[colorlinks,linkcolor=blue]{hyperref}

\title{Day 5: How About a Nice Game of Chess?}
\date{5 December 2016}
\author{Vincent Foley}

\begin{document}

\maketitle{}

This is the first solution that requires Cargo,
because I need to fetch the [[rust-crypto]]
dependency.  I have modified the [[build.sh]]
script; if a second optional argument is given
and has the value [["cargo"]], Cargo is used
for building, otherwise, the old compilation
scheme using [[rustc]] directly still applies.

\section{Problem A}

The way the problem was worded made it a little tough
for me to understand what was required.  After some
careful reading, I think I have it, so here's the
pseudo-code for the solution.

<<pseudo code of the solution>>=
door_id := "ugkcyxxp"
index := 0
for i := 0 to 7 do
    while true do
        index += 1
        attempt := door_id + index (* string concat *)
        hash := md5(attempt)
        if hash.starts_with("00000") then
            print hash[5]
            break
    done
done
@

Since Rust doesn't have MD5 hashing in its
standard library, we need to use cargo to
download an implementation.

\section{Solution A}

The Rust solution pretty much follows the pseudo code.
The only highlights that we might want to mention:

\begin{itemize}
\item an md5 digester object needs to be created;
\item the digester is reset before the string is entered;
\item the [[Digest]] trait has the useful [[result_str]] method
  that gives the hash in hexadecimal, making the solution even
  closer to the pseudo code.
\end{itemize}

<<solution A>>=
let mut index = 0;
let mut md5 = Md5::new();
let mut solution_a = String::new();
for _ in 0..8 {
    loop {
        index += 1;
        let attempt = format!("ugkcyxxp{}", index);
        md5.reset();
        md5.input_str(&attempt);
        let hash = md5.result_str();
        if hash.starts_with("00000") {
            solution_a.push(hash.chars().nth(5).unwrap());
            break;
        }
    }
}
println!("A: {}", solution_a);
@

\section{Problem B}

Pretty much the same thing as Problem A,
except that the 6th bit is now a position
(if the position is greater than 7, we ignore it),
and the 7th bit is the character to insert.

We must also ignore repeated positions; if
the byte at the specified position in the
solution vector is equal to zero, insert
the 7th byte, otherwise skip.

\section{Solution B}

<<solution B>>=
let mut index = 0;
let mut md5 = Md5::new();
let mut solution_b: Vec<u8> = vec![0,0,0,0,0,0,0,0];
for _ in 0..8 {
    loop {
        index += 1;
        let attempt = format!("ugkcyxxp{}", index);
        md5.reset();
        md5.input_str(&attempt);
        let hash = md5.result_str();
        if hash.starts_with("00000") {
            let fifth_byte = hash.chars().nth(5).unwrap().to_digit(16).unwrap() as usize;
            let sixth_char = hash.chars().nth(6).unwrap() as u8;
            if fifth_byte < 8 && solution_b[fifth_byte] == 0 {
                solution_b[fifth_byte] = sixth_char;
                break;
            }
        }
    }
}
let solution_str = String::from_utf8(solution_b).unwrap();
println!("B: {}", solution_str);
@

\section{Putting it all together}


<<*>>=
extern crate crypto;
use crypto::md5::Md5;
use crypto::digest::Digest;
#[cfg(not(test))]
fn main() {
    { <<solution A>> }
    { <<solution B>> }
}
@

\begin{appendices}

\section{}

<<unit tests>>=
@

<<*>>=
#[cfg(test)]
mod test {
    <<unit tests>>
}
@

\end{appendices}

\end{document}
