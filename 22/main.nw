\documentclass{article}

\usepackage{noweb}
\usepackage[utf8]{inputenc}
\usepackage{geometry}
\usepackage{parskip}
\usepackage{amsmath}
\usepackage{mathtools}
\usepackage[title]{appendix}
\usepackage[colorlinks,linkcolor=blue]{hyperref}

\title{Day 22: Grid Computing}
\date{22 December 2016}
\author{Vincent Foley}

\begin{document}

\maketitle{}


\section{Problem A}

Another day, another graph search problem?
The problem for part A seems quite straight-%
forward, however I foresee a graph traversal
in part B.

\section{Solution A}

\paragraph{Disk}
Let's define an appropriate structure for representing
a disk:

<<data structures>>=
#[derive(Debug, PartialEq, Eq, Hash, PartialOrd, Clone, Copy)]
struct Disk {
    id: (isize, isize),
    avail: usize,
    used: usize
}
@

\paragraph{Parsing data}
\emph{Sigh}, more parsing...

<<functions>>=
fn parse_size(s: &str) -> usize {
    s[0 .. s.len() - 1].parse::<usize>().unwrap()
}

fn parse_pos(s: &str) -> isize {
    s[1..].parse::<isize>().unwrap()
}

fn parse(s: &str) -> Disk {
    let toks: Vec<&str> = s.split_whitespace().collect();
    let name_parts: Vec<&str> = toks[0].split('-').collect();
    Disk {
        id: (parse_pos(name_parts[1]), parse_pos(name_parts[2])),
        used: parse_size(toks[2]),
        avail: parse_size(toks[3]),
    }
}
@

<<unit tests>>=
#[test]
fn test_parse() {
    use super::{Disk, parse};
    assert_eq!(Disk { id: (0, 4), used: 69, avail: 20 },
        parse("/dev/grid/node-x0-y4     89T   69T    20T   77%"));
    assert_eq!(Disk { id: (36, 25), used: 67, avail: 20 },
        parse("/dev/grid/node-x36-y25   87T   67T    20T   77%"));
}
@

\paragraph{Finding viable pairs}

The problem states quite clearly what a viable
pair is: two disks, $D_1$ and $D_2$, where
$D_1 \ne D_2$,
$D_1$ is not empty (i.e., used is greater than 0),
and $D_1$'s data fits completely in $D_2$.

<<functions>>=
fn viable_pair(d1: &Disk, d2: &Disk) -> bool {
    d1.id != d2.id && d1.used > 0 && d1.used <= d2.avail
}
@

<<unit tests>>=
#[test]
fn test_viable_pair() {
    use super::{Disk, viable_pair};
    let d1 = Disk { id: (0, 0), used: 3, avail: 7 };
    let d2 = Disk { id: (1, 1), used: 5, avail: 5 };
    let d3 = Disk { id: (2, 2), used: 6, avail: 4 };
    assert_eq!(false, viable_pair(&d1, &d1));
    assert_eq!(true , viable_pair(&d1, &d2));
    assert_eq!(true , viable_pair(&d1, &d3));

    assert_eq!(true , viable_pair(&d2, &d1));
    assert_eq!(false, viable_pair(&d2, &d2));
    assert_eq!(false, viable_pair(&d2, &d3));

    assert_eq!(true , viable_pair(&d3, &d1));
    assert_eq!(false, viable_pair(&d3, &d2));
    assert_eq!(false, viable_pair(&d3, &d3));
}
@

\paragraph{Solving part A}

We can find the total number of viable pairs
in $O(n^2)$ by invoking the [[viable_pair]]
function between every pair of disks.

<<functions>>=
fn solve_a(disks: &[Disk]) -> usize {
    let mut viable = 0;
    for i in 0 .. disks.len() {
        for j in 0 .. disks.len() {
            if viable_pair(&disks[i], &disks[j]) {
                viable += 1;
            }
        }
    }
    return viable;
}
@

<<unit tests>>=
#[test]
fn test_solve_a() {
    use super::{Disk, solve_a};
    let disks = vec![
        Disk { id: (0, 0), used: 3, avail: 7 },
        Disk { id: (1, 1), used: 5, avail: 5 },
        Disk { id: (2, 2), used: 6, avail: 4 },
    ];
    assert_eq!(4, solve_a(&disks));
}
@

\section{Problem B}

Ah, now we get to the serious stuff.
We want to bring the content from
node $\langle x=max_x, y=0 \rangle$
to node $\langle x=0, y=0 \rangle$
in the fewest number of moves.

\paragraph{General approach}

So I spent way too much time
and effort trying to solve this
problem as a path finding problem.

Since all nodes are too full to have
more than one hole at a time, this
is basically a 15-puzzle.  The
following function prints it out
(the hashes are pieces that can never move)
and then I just manually counted how
many steps it takes to get the empty
node to the top-right node, then how many steps
it takes to bring the payload all the
way to the left, and used Emacs'
calc-mode to get the answer, 252.

<<functions>>=
fn show2(disks: &[Disk]) {
    for y in 0 .. 28 {
        for x in 0 .. 38 {
            let idx = y + x * 28;
            let used = disks[idx].used;
            if idx == 0 { print!("G"); }
            else if y == 0 && x == 37 { print!("!"); }
            else if used == 0 { print!("_"); }
            else if used < 400 { print!("."); }
            else { print!("#"); }
        }
        println!("");
    }
}
@

\section{Putting it all together}

<<*>>=
use std::io;
use std::collections::{VecDeque, HashSet};

<<data structures>>
<<functions>>

#[cfg(not(test))]
fn main() {
    let stdin = io::stdin();
    let mut buf = String::new();
    let mut disks = Vec::new();

    // Skip first two lines
    stdin.read_line(&mut buf);
    stdin.read_line(&mut buf);
    buf.clear();

    while stdin.read_line(&mut buf).unwrap() > 0 {
        disks.push(parse(&buf));
        buf.clear();
    }

    println!("A: {}", solve_a(&disks));

    show2(&disks);
}
@

\begin{appendices}

\section{}

<<*>>=
#[cfg(test)]
mod test {
    <<unit tests>>
}
@



\end{appendices}

\end{document}
