\documentclass{article}

\usepackage{noweb}
\usepackage[utf8]{inputenc}
\usepackage{geometry}
\usepackage{parskip}
\usepackage{amsmath}
\usepackage{mathtools}
\usepackage[title]{appendix}
\usepackage[colorlinks,linkcolor=blue]{hyperref}

\title{Day 24: Air Duct Spelunking}
\date{24 December 2016}
\author{Vincent Foley}

\begin{document}

\maketitle{}


\section{Problem A}

I swear this guy has a hard-on for path finding
problems...  We're given a maze with a few points
that we must visit; starting at point 0, we must
visit, in any order the other points in a minimal
number of steps.  We can step on a point multiple
times (i.e., this is not the Traveling Salesman
Problem).

\section{Solution A}

The input for this problem has only 8 points to
visit, including the initial 0 node.
This means there are only 5040 ways to visit
the nodes 1 to 7, a rather small number
of permutations on a modern machine.
Therefore, I will adopt the following approach:
\begin{itemize}
\item For each node $n$ from 0 to 7,
      run a BFS starting at $n$;
      the return value gives the distance from $n$
      to the other points of interest.
\item Generate all the permutations for the
      list $[1,2,3,4,5,6,7]$.
\item For each permutation $p$, compute the sum
      of the distances from 0 to $p_1$, $p_1$ to $p_2$,
      etc.
\item Display the minimum distance.
\end{itemize}

\subsection{Graph}

\paragraph{Representation}
Once again we create a data type for our graph.
In addition to the adjacency list, the graph
contains a mapping between the points of interest
(0, 1, 2, etc.) and their $x,y$ coordinates in
the graph.

<<data structures>>=
type Node = (usize, usize);
struct Graph {
    coords: HashMap<usize, Node>,
    neighbors: HashMap<Node, Vec<Node>>,
}
@

\paragraph{Parsing}
Another day, another ad-hoc parsing routine.
The main function will read all the data
into a 2D vector of bytes.

Since the top and bottom rows
and the left and right columns
are all walls (represented with a `\#'),
we can loop only from line 1 to line $m-1$,
and from column 1 to column $n-1$.
This avoids any need to check that
the orthogonal neighbors are in-bounds.

<<functions>>=
fn parse(rows: &Vec<Vec<u8>>) -> Graph {
    let mut g = Graph {
        coords: HashMap::new(),
        neighbors: HashMap::new()
    };
    for i in 1 .. rows.len() - 1 {
        for j in 1 .. rows[i].len() - 1 {
            if rows[i][j] == b'#' { continue; }
            if rows[i][j] >= b'0' && rows[i][j] <= b'9' {
                g.coords.insert((rows[i][j] - b'0') as usize, (i,j));
            }
            let mut v = Vec::new();
            if rows[i-1][j] != b'#' { v.push((i-1, j)); }
            if rows[i+1][j] != b'#' { v.push((i+1, j)); }
            if rows[i][j-1] != b'#' { v.push((i, j-1)); }
            if rows[i][j+1] != b'#' { v.push((i, j+1)); }
            g.neighbors.insert((i, j), v);
        }
    }
    return g;
}
@

\subsection{Searching}
In the previous problems, I bailed out as soon as reached my target;
with multiple targets, I'd need to do a more complex verification
to know if I can exit the search early.
Since the input graph is not very large, I will refrain from
trying to break early and will let the algorithm finish its
whole course.

(\textbf{Update:} completing the search is indeed
fast enough, and there is no need to revisit this
decision.)

The [[bfs]] functions maintains two data structures:
a queue of $x,y$ coordinates to visit,
and a map between an $x,y$ coordinate and
its distance to the start node.

Once the distances for \emph{all} the
points in the graph have been computed,
we use the graph's [[coords]] to extract
and return only the distances between
the start node and the other nodes of
interest.

<<functions>>=
fn bfs(g: &Graph, start_node: usize) -> HashMap<usize, usize> {
    let mut queue = VecDeque::new();
    let mut dist = HashMap::new();

    let origin = g.coords.get(&start_node).unwrap();
    queue.push_front(origin);
    dist.insert(origin, 0);

    while !queue.is_empty() {
        let curr = queue.pop_back().expect("empty queue");
        let d = *dist.get(curr).expect("no distance");
        for neighbor in g.neighbors.get(curr).unwrap().iter() {
            if dist.contains_key(&neighbor) { continue; }
            dist.insert(neighbor, 1 + d);
            queue.push_front(neighbor);
        }
    }
    let mut ret = HashMap::new();
    for (node, coord) in g.coords.iter() {
        ret.insert(*node, *dist.get(coord).unwrap());
    }
    return ret;
}
@

\subsection{Generating permutations}
We saw how to generate permutations
a few days ago, so I'll just copy
the code.

<<functions>>=
fn permute(input: &Vec<usize>) -> Vec<Vec<usize>> {
    if input.is_empty() {
        return vec![vec![]];
    } else {
        let mut out = Vec::new();
        let mut copy = input.clone();
        let x = copy.remove(0);
        let perms = permute(&copy);
        for i in 0 .. perms.len() {
            for j in 0 .. perms[i].len() {
                let mut copy2 = perms[i].clone();
                copy2.insert(j, x);
                out.push(copy2);
            }
            let mut copy2 = perms[i].clone();
            copy2.push(x);
            out.push(copy2);
        }
        return out;
    }
}
@

\subsection{Solving A}

We can now solve part A by
putting all the parts together.

The [[main]] function will read
the data from the input file and
create the graph.

With our graph set up and ready
to go, we run BFS multiple times,
using nodes 0, 1, ..., 7 as the origins.
We keep the maps of distances in a vector;
the map in [[dists[i]]] contains the
maps that gives the distances between the
point $i$ and the other nodes of interest.

Once we have all the distances,
we use [[permute]] to compute all
the differents orders in which the nodes
1 ... $n-1$ can be visited.
We compute the length of the total path,
and keep the minimum.

When we have the minimal path length to
visit all the nodes, we return it.

<<functions>>=
fn solve_a(g: &Graph) -> usize {
    let mut dists = Vec::new();

    for i in 0 .. g.coords.len() {
        dists.push(bfs(g, i));
    }

    let steps: Vec<usize> = (1 .. g.coords.len()).collect();
    let perms = permute(&steps);

    let mut min = usize::max_value();

    for p in perms {
        // Sum
        let mut curr_dist = 0;
        let mut prev = 0;

        for k in p.iter() {
            curr_dist += *dists[prev].get(k).unwrap();
            prev = *k;
        }

        if curr_dist < min {
            min = curr_dist;
        }
    }

    return min;
}
@

\section{Problem B}

Part B asks us to be inconspicuous
and put the robot back in place.
We can take the solution for A
and scoot from our last point
back to 0 using the shortest
path (found in the [[dists]] vector).

<<functions>>=
fn solve_b(g: &Graph) -> usize {
    let mut dists = Vec::new();

    for i in 0 .. g.coords.len() {
        dists.push(bfs(g, i));
    }

    let steps: Vec<usize> = (1 .. g.coords.len()).collect();
    let perms = permute(&steps);

    let mut min = usize::max_value();

    for p in perms {
        // Sum
        let mut curr_dist = 0;
        let mut prev = 0;

        for k in p.iter() {
            curr_dist += *dists[prev].get(k).unwrap();
            prev = *k;
        }
        curr_dist += *dists[p[p.len() - 1]].get(&0).unwrap();

        if curr_dist < min {
            min = curr_dist;
        }
    }

    return min;
}
@



\section{Putting it all together}

<<*>>=
use std::io;
use std::collections::{VecDeque, HashMap};

<<data structures>>
<<functions>>

#[cfg(not(test))]
fn main() {
    let stdin = io::stdin();
    let mut buf = String::new();
    let mut rows = Vec::new();
    while stdin.read_line(&mut buf).unwrap() > 0 {
        rows.push(buf.clone().into_bytes());
        buf.clear();
    }
    let g = parse(&rows);

    println!("A: {}", solve_a(&g));
    println!("B: {}", solve_b(&g));
}
@

\end{document}
